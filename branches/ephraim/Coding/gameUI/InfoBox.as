package gameUI {	import gameControl.*;	import gameData.XMLgameData;	import gameUI.Interface;	import flash.text.TextField;	import flash.display.MovieClip;	import flash.events.*;	import flash.utils.Timer;		public class InfoBox extends MovieClip {		private var _menu;		private var _curMessageLife:int;		private static var _maxPass:int = 0;		private static var _curPass:int = 0;		private static var _maxArrest:int = 0;		private static var _curArrest:int = 0;				private const MESSAGE_LIFE:int = 5; //Time until message starts to fade out		private const ALPHA_DELTA:int = 20;				public function InfoBox(menu:Menus):void {			Globals.infoBox = this;						TheGame.getGameTik().addEventListener(TimerEvent.TIMER, updateStats);			_menu = menu;						message_box.text = "";		}				// Updates everything per game tick		private function updateStats(e:TimerEvent):void {			updateMoney();			updateRep();			dispText();						InfoBox._maxArrest = _menu.gameData.getLevel(TheGame.getLevel(), "minViolations")			InfoBox._maxPass = _menu.gameData.getLevel(TheGame.getLevel(), "passengers");			t_passengers.text = TheGame.getNumPass()+"/"+InfoBox.maxPass+" passengers";			t_arrests.text = TheGame.getArrests()+" arrests";		}				// Sets the money on the UI		private function updateMoney():void {			t_money.text = "$"+TheGame.getMoney().toString();			if (TheGame.getMoney() < 0) {				t_money.textColor = 0xFF0000;			} else {				t_money.textColor = 0xFFFFFF;			}		}				// Sets the reputation on the UI		private function updateRep():void {			t_rep.text = TheGame.getReputation().toString()+" Rep";		}				// --------------------------- MESSAGE BOX FUNCTIONS				// Function to add a text notification		public function addText(info:String, bFade:Boolean = false):void {			message_box.alpha = 1;			message_box.text = info;			_curMessageLife = MESSAGE_LIFE;						if (!bFade) {				_curMessageLife = -1;			}		}						// Updates text every game tick		private function dispText():void {			if (_curMessageLife == 0) {				message_box.alpha -= ALPHA_DELTA / 100;										if(message_box.alpha <= 0)				{					message_box.text = "";					message_box.alpha = 1;				}			} else {				_curMessageLife--;			}		}				public function clearText():void {			message_box.text = "";		}// ---------------------------------- SETTERS AND GETTERS				// Gets the current passenger count		public static function get curPass():int {			return (InfoBox._curPass);		}				// Sets the current passenger count. Call without () to just increment		public static function set curPass(num:int):void {			InfoBox._curPass = InfoBox._curPass + num;		}								// Gets the maximum passenger count		public static function get maxPass():int {			return (InfoBox._maxPass);		}		// Gets the current arrest count		public static function get curArrests():int {			return (InfoBox._curArrest);		}				// Sets the current arrest count. Call without () to just increment		public static function set curArrests(num:int):void {			InfoBox._curArrest = InfoBox._curArrest + num;		}								// Gets the maximum arrest count		public static function get maxArrests():int {			return (InfoBox._maxArrest);		}				// Returns security slider level		public function get secLevel():int {			return slider.getSliderVal();		}	}}