package gameGraphics{	import utilities.*;	import gameLogic.*;	import flash.display.*;	import flash.events.*;		public class PassengerG extends Sprite	{		private var xTarg:Array = new Array();		private var yTarg:Array = new Array();				private var originX:Number = 0;		private var originY:Number = 0;				private var targSpeed:Number = 0;				private var xSpeed:Number = 0;		private var ySpeed:Number = 0;				private var footPrintW:Number = 40;		private var footPrintH:Number = 20;		private var footPrintX:Number = -20;		private var footPrintY:Number = -10;				private var spriteOffsetX:Number = 0;		private var spriteOffsetY:Number = -40;		private var spriteScale:Number = 1;				public var atTic:Number = 0;		public var waitTic:Number = 0;		public var reroutTic:Number = 0;		public var rerouting:Boolean = false;		public var gimmeDist:Number = 30;				public var obsolete:Boolean = false;				private var inittedB:Boolean = false;		private var movingMC:MovieClip;						//private var corporealForm:Corpse = new Corpse();		//private var corporealForm:CorpseHolder = new CorpseHolder();		private var corpWalk:PWalk = new PWalk();		private var corpStand:PStand = new PStand();				private var logicPass:Passenger = null;				public function PassengerG(x_:Number, y_:Number, tx_:Number, ty_:Number, logic:Passenger):void		{						corpWalk.x = spriteOffsetX;			corpWalk.y = spriteOffsetY;			corpWalk.width = corpWalk.width*spriteScale;			corpWalk.height = corpWalk.height*spriteScale;						corpStand.x = spriteOffsetX;			corpStand.y = spriteOffsetY;			corpStand.width = corpStand.width*spriteScale;			corpStand.height = corpStand.height*spriteScale;						//movingMC = corporealForm.layer_1_walk;			movingMC = corpWalk;			x = x_;			y = y_;						targSpeed = Utilities.randRange(2,7);			waitTic = Utilities.randRange(15,25);			reroutTic = Utilities.randRange(15,30);									logicPass = logic;						this.addChild(movingMC);						//this.addEventListener(Event.ENTER_FRAME, frameEntered);												setTarg(tx_, ty_);						inittedB = true;		}				public function initted():Boolean		{			return inittedB;		}				private function frameEntered(e:Event):void		{			//drawMe();		}/*				public function jumpTo():void		{			x = xTarg[0];			y = yTarg[0];			atTarg();		}*/				private function recalSpeeds():void		{			xSpeed = targSpeed*(xTarg[0] - x)/Math.sqrt(Math.pow(xTarg[0] - x,2) + Math.pow(yTarg[0] - y,2));			ySpeed = targSpeed*(yTarg[0] - y)/Math.sqrt(Math.pow(xTarg[0] - x,2) + Math.pow(yTarg[0] - y,2));		}				public function tStep():void		{			if(SUtilities.switchedSide(yTarg[0], originY, y + ySpeed) && SUtilities.switchedSide(xTarg[0], originX, x + xSpeed))			{				 atTarg();			}else{				if(xTarg.length >= 1)				{					x += xSpeed;					y += ySpeed;				}			}		}				private function setOrigin():void		{			originX = x;			originY = y;		}				private function atTarg():void		{			trace("at targ");			xTarg.shift();			yTarg.shift();			setOrigin();			if(xTarg.length < 1)			{				trace("ran out of targets");				killMe();			}else{				recalSpeeds();				updateHeading();			}			//randTarg();		}				public function randTarg():void		{			//trace("---rand---");			//trace(xTarg);			setTarg(Utilities.randRange(0,700), Utilities.randRange(0,500));			//trace(xTarg);			//trace("----------");		}				public function setTarg(x_:Number, y_:Number):void		{			xTarg.unshift(x_);			yTarg.unshift(y_);			setOrigin();			recalSpeeds();			updateHeading();		}				public function skipTarg():void		{			//trace("---skip---");			//trace(xTarg);			xTarg.shift();			yTarg.shift();			setOrigin();			//trace(xTarg);			//trace("----------");			recalSpeeds();			updateHeading();		}				public function addTarg(x_:Number, y_:Number):void		{			xTarg.push(x_);			yTarg.push(y_);		}				private function drawMe():void		{			/*corporealForm.graphics.clear();			corporealForm.graphics.lineStyle(0,0x000000);			corporealForm.graphics.beginFill(0xFF0000,.5);			corporealForm.graphics.drawCircle(x, y, 20);			corporealForm.graphics.endFill();*///			corporealForm.x = x;//			corporealForm.y = y;		}				private function updateHeading():void		{			var theta:Number = Math.atan(Math.abs(xSpeed/ySpeed))*180/Math.PI;									if(xSpeed >= 0 && ySpeed <= 0)				theta = 90 - theta;			else if(xSpeed <= 0 && ySpeed <= 0)				theta = theta + 90;			else if(xSpeed <= 0 && ySpeed >= 0)				theta = 270 - theta;			else if(xSpeed >= 0 && ySpeed >= 0)				theta = theta + 270;						theta += 22.5 + 90;//			theta += 22.5;						theta = ((theta/360) - Math.floor(theta/360))*360;			//			corporealForm.squished_corpse.gotoAndStop(Math.ceil(theta/45));			//			trace("movingMC: "+movingMC);			movingMC.cBody.gotoAndStop(Math.ceil(theta/45));			movingMC.cLegs.gotoAndStop(Math.ceil(theta/45));			movingMC.cFloor.gotoAndStop(Math.ceil(theta/45));//			movingMC.cLegs.legs			//			trace("cf:"+corporealForm);//			trace("layer:"+corporealForm.layer_1);//			trace("clegs:"+corporealForm.layer_1.cLegs);//			trace("clegs:"+corporealForm.layer_1.cLegs.legs6);//			trace("legs:"+corporealForm.layer_1.cLegs.legs);			/*trace("---------------------");			trace("legs1:"+movingMC.cLegs.legs1);			trace("legs2:"+movingMC.cLegs.legs2);			trace("legs3:"+movingMC.cLegs.legs3);			trace("legs4:"+movingMC.cLegs.legs4);			trace("legs5:"+movingMC.cLegs.legs5);			trace("legs6:"+movingMC.cLegs.legs6);			trace("legs7:"+movingMC.cLegs.legs7);			trace("legs8:"+movingMC.cLegs.legs8);*/						/*corporealForm.layer_1.cLegs.legs1.play();			corporealForm.layer_1.cLegs.legs2.play();			corporealForm.layer_1.cLegs.legs3.play();			corporealForm.layer_1.cLegs.legs4.play();			corporealForm.layer_1.cLegs.legs5.play();			corporealForm.layer_1.cLegs.legs6.play();			corporealForm.layer_1.cLegs.legs7.play();			corporealForm.layer_1.cLegs.legs8.play();*/						//			corporealForm.layer_1.cLegs.legs.outline.play();//			corporealForm.layer_1.cLegs.legs.pFill.play();//			corporealForm.layer_1.cLegs.legs.pShade.play();//			corporealForm.layer_1.cLegs.legs.sFill.play();//			corporealForm.layer_1.cLegs.legs.sShade.play();		}				public function startWalk():void		{			this.removeChild(movingMC);			movingMC = corpWalk;									this.addChild(movingMC);			updateHeading();		}				public function stopWalk():void		{			this.removeChild(movingMC);			movingMC = corpStand;									this.addChild(movingMC);			updateHeading();		}				public function closeEnough():Boolean		{			return distToTarg() <= gimmeDist;		}				public function distToTarg():Number		{			return Math.sqrt(Math.pow(xTarg[0] - x,2) + Math.pow(yTarg[0] - y,2));		}				public function getFootPrintX():Number		{			return footPrintX + x;		}				public function getFootPrintY():Number		{			return footPrintY + y;		}				public function getFootPrintW():Number		{			return footPrintW;		}				public function getFootPrintH():Number		{			return footPrintH;		}				public function getSpeedX():Number		{			return xSpeed;		}				public function getSpeedY():Number		{			return ySpeed;		}				public function killMe():void		{						trace("killing myself");					this.removeEventListener(Event.ENTER_FRAME, frameEntered);//			corporealForm.graphics.clear();			obsolete = true;					}	}}