package gameLogic {	/* This class encapsulates an X-Ray machine with efficiency slider and possibilites for power ups. 		It will be extended by the CheepieXRayMachine and the SuperXRayMachine */	public class XRayMachine extends SliderMachine{		protected var powerUpGunKnife:Boolean=false;		protected var powerUpBomb:Boolean=false;		protected var pricePowerUpGunKnife:int;		protected var pricePowerUpBomb:int;				public function XRayMachine(									unitName:String, 									mood:Number, 									price:int, 									sellFor:int, 									prohObjs:Array, 									accuracyMin:int, 									accuracyMax:int, 									speedMin:Number, 									speedMax:Number, 									pricePowerUpGunKnife:int, 									pricePowerUpBomb:int									) {			super(unitName, mood, price, sellFor, prohObjs, accuracyMin, accuracyMax, speedMin, speedMax);			this.pricePowerUpGunKnife = pricePowerUpGunKnife;			this.pricePowerUpBomb = pricePowerUpBomb;		}																	 				//POST: All values are correctly set when Gun & Knife are powered up. 		//If the power up for bombs is enabled, then does nothing		public function doPowerUpGunKnife():void {			if(powerUpGunKnife==false&&powerUpBomb==false) {				buy(pricePowerUpKnife);				sellFor = sellFor + pricePowerUpGunKnife/2;				powerUpGunKnife = true;			}		}		//POST: All values are correctly set when Bombs are powered up. 		//If the power up for Gun & Knife is enabled, then does nothing		public function doPowerUpBomb():void {			if(powerUpGunKnife==false&&powerUpBomb==false) {				buy(pricePowerUpKnife);				sellFor = sellFor + pricePowerUpBomb/2;				powerUpBomb = true;			}		}				//Takes into account the special accuracy setting for power ups		protected override function isCaught(pObj:ProhibitedObject):Boolean 		{			var accuracySpecial:Number = accuracy;						if(pObj == null) return false;			if (prohObjs.some(testKindProhObjs)) 			{				if((powerUpGunKnife == true&&(pObj.getKindOfObj()=="knife"||pObj.getKindOfObj()=="gun")) || (powerUpBomb == true&&pObj.getKindOfObj()=="bomb")) {					var percent:Number = (accuracy - accuracyMin) / (accuracyMax - accuracyMin);					accuracySpecial = accuracySpecialMin + (accuracySpecialMax - accuracySpecialMin) * percent;				}							var chance:Number = Math.random();				if (chance<((accuracySpecial * Airport.getSecurityAlertLevelMultiplyer())/100)) 					return true;			}			return false;											function testKindProhObjs(item:*, index:int, array:Array):Boolean {				var elem:ProhibitedObject=item;				return (elem.getKindOfObj() == pObj.getKindOfObj())			}		}					}	}