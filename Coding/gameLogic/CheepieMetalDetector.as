package gameLogic {	import gameData.*;		/* Encapsulates the Cheepie Metal Detector with the power up possibilites for guns or knives */	public class CheepieMetalDetector extends MetalDetector {		private static var pricePowerUpKnife:int = Number(XMLmachineData.getXML("MetalDetector","powerUpKnifePrice","1"));//READ IN FROM XML:		private static var pricePowerUpGun:int = Number(XMLmachineData.getXML("MetalDetector","powerUpGunPrice","1"));//READ IN FROM XML:				//Power up changes accuracy for only one object. The min and max values are stored in these variables.		private static var accuracySpecialMin:int = Number(XMLmachineData.getXML("MetalDetector","powerUpAccuracyMin","1"));//READ IN FROM XML:		private static var accuracySpecialMax:int = Number(XMLmachineData.getXML("MetalDetector","powerUpAccuracyMax","1"));//READ IN FROM XML:				private var powerUpKnife:Boolean = false;		private var powerUpGun:Boolean = false;				public function CheepieMetalDetector() {			super("Cheepie Metal Detector", 				  Number(XMLmachineData.getXML("MetalDetector","moodChange","1")), 				  Number(XMLmachineData.getXML("MetalDetector","price","1")), 				  Number(XMLmachineData.getXML("MetalDetector","sellFor","1")), 				  [new Gun(), new Knife()], 				  Number(XMLmachineData.getXML("MetalDetector","accuracyMin","1")), 				  Number(XMLmachineData.getXML("MetalDetector","accuracyMax","1")), 				  Number(XMLmachineData.getXML("MetalDetector","speedMin","1")), 				  Number(XMLmachineData.getXML("MetalDetector","speedMax","1")), 				  Number(XMLmachineData.getXML("MetalDetector","speedUpGuardPrice","1")), 				  Number(XMLmachineData.getXML("MetalDetector","speedUpGuardSpeed","1"))				  );//READ IN FROM XML:		}				//PRE: There has to be a guard installed.		//POST: All values are correctly set when Knife is powered up. 		//If the power up for guns is enabled, then does nothing		public function doPowerUpKnife():void {			if(powerUpKnife==false&&powerUpGun==false&&guard==true) {				buy(pricePowerUpKnife);				sellFor = sellFor + pricePowerUpKnife/2;				powerUpKnife = true;			}		}		//PRE: There has to be a guard installed.		//POST: All values are correctly set when Gun is powered up. 		//If the power up for Knife is enabled, then does nothing		public function doPowerUpGun():void {			if(powerUpKnife==false&&powerUpGun==false&&guard==true) {				buy(pricePowerUpGun);				sellFor = sellFor + pricePowerUpGun/2;				powerUpGun = true;			}		}				//Takes into account the special accuracy setting for power ups		protected override function isCaught(pObj:ProhibitedObject):Boolean 		{			var accuracySpecial:Number = accuracy;						if(pObj == null) return false;			if (prohObjs.some(testKindProhObjs)) 			{				if((powerUpKnife == true&&pObj.getKindOfObj()=="knife") || (powerUpGun == true&&pObj.getKindOfObj()=="gun")) {					var percent:Number = (accuracy - accuracyMin) / (accuracyMax - accuracyMin);					accuracySpecial = accuracySpecialMin + (accuracySpecialMax - accuracySpecialMin) * percent;				}							var chance:Number = Math.random();				if (chance<((accuracySpecial * Airport.getSecurityAlertLevelMultiplyer())/100)) 					return true;			}			return false;											function testKindProhObjs(item:*, index:int, array:Array):Boolean {				var elem:ProhibitedObject=item;				return (elem.getKindOfObj() == pObj.getKindOfObj())			}		}					}}