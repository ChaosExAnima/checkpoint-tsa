package gameOptions{	  	import gameOptions.MusicSlider;	import soundManager.SoundManager;  	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.display.Stage;	import flash.events.MouseEvent;	import flash.net.SharedObject;		public class Options extends Sprite    {		var m_musicSlider:MusicSlider;		var m_sndMgr:SoundManager;		var m_optionsMC:MovieClip;		var m_stage:Stage;		var m_strQuality:String;				var m_parentOptionDestroyFunction;				public function Options(aStage:Stage, aSndMgr:SoundManager, optionMC:MovieClip, sliderMC:MovieClip, parentOptionDestroyFunction)		{			m_sndMgr = aSndMgr;			m_optionsMC = optionMC;			m_stage = aStage;			m_parentOptionDestroyFunction = parentOptionDestroyFunction;									var so:SharedObject = SharedObject.getLocal("quality");			if(!so.size)			{				// trace("create quality");				aStage.quality = "MEDIUM";				so.data.level = "MEDIUM";				m_strQuality = "MEDIUM";			}			else			{				// trace(so.data.level);				aStage.quality = so.data.level;				m_strQuality = so.data.level;			}							updateGraphicButton();							m_optionsMC.optionMenuMC.txt_soundFX.mouseEnabled = false;			m_optionsMC.optionMenuMC.txt_graphics.mouseEnabled = false;						updateMuteButton();				addChild(optionMC);						m_musicSlider = new MusicSlider(aStage, aSndMgr, sliderMC);			m_optionsMC.optionMenuMC.addChild(m_musicSlider);			m_musicSlider.x = -125;			m_musicSlider.y = 66;						m_optionsMC.optionMenuMC.btn_soundFX.addEventListener(MouseEvent.MOUSE_UP, onSoundFX);			m_optionsMC.optionMenuMC.btn_graphics.addEventListener(MouseEvent.MOUSE_UP, onGraphics);			m_optionsMC.optionMenuMC.btn_credits.addEventListener(MouseEvent.MOUSE_UP, onCredits);						m_optionsMC.addEventListener(MouseEvent.MOUSE_DOWN, onGeneralClick);		}				public function onGeneralClick(event:MouseEvent):void		{			if(m_optionsMC.optionMenuMC 			   && m_optionsMC.optionMenuMC.hitTestPoint(event.stageX, event.stageY, false))			{				return;			}									m_stage.removeChild(this);						m_parentOptionDestroyFunction();		}				public function onCredits(event:MouseEvent):void		{			m_optionsMC.gotoAndStop("credits");		}				public function onGraphics(event:MouseEvent):void 		{			switch(m_strQuality)			{				case "LOW":					m_strQuality = "MEDIUM";					break;				case "MEDIUM":					m_strQuality = "HIGH";					break;					case "HIGH":					m_strQuality = "BEST";					break;				case "BEST":					m_strQuality = "LOW";					break;				default:					m_strQuality = "MEDIUM";					break;			}						var so:SharedObject = SharedObject.getLocal("quality");			so.data.level = m_strQuality;						updateGraphicButton();		}				private function updateGraphicButton():void		{			switch(m_strQuality)			{				case "LOW":					m_optionsMC.optionMenuMC.txt_graphics.text = "Graphics: Low";					break;				case "MEDIUM":					m_optionsMC.optionMenuMC.txt_graphics.text = "Graphics: Medium";					break;					case "HIGH":					m_optionsMC.optionMenuMC.txt_graphics.text = "Graphics: High";					break;				case "BEST":					m_optionsMC.optionMenuMC.txt_graphics.text = "Graphics: Best";					break;			}					}						public function onSoundFX(event:MouseEvent):void 		{			var bVal = m_sndMgr.toggleMute();				updateMuteButton();		}				private function updateMuteButton():void		{			if(!m_sndMgr.getMute())			{				m_optionsMC.optionMenuMC.txt_soundFX.text = "Sound Effects: On";			}			else			{				m_optionsMC.optionMenuMC.txt_soundFX.text = "Sound Effects: Off";			}					}	}}